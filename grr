# ui/view.py
import os, time, pandas as pd, streamlit as st
from controllers.controller import Controller

THEME = """
<style>
#MainMenu, footer, header {visibility: hidden;}
.block-container {padding-top: 0.6rem; padding-bottom: 1.2rem;}
.card { border-radius: 16px; padding: 16px; border: 1px solid #e5e7eb; background: #ffffff; box-shadow: 0 1px 2px rgba(0,0,0,0.06); }
.big-metric {font-size: 1.5rem; font-weight: 700;}
.small-muted {color:#6b7280; font-size:0.9rem;}
.badge {display:inline-block; padding:4px 10px; border-radius:9999px; background:#eef2ff; color:#3730a3; font-weight:600;}
</style>
"""

try:
    import faiss
    HAVE_FAISS = True
except Exception:
    HAVE_FAISS = False

class View:
    def __init__(self, controller: Controller):
        self.C = controller
        st.markdown(THEME, unsafe_allow_html=True)

    def sidebar(self):
        with st.sidebar:
            st.subheader("Controls")
            self.C.M.running = st.toggle("Live stream", value=self.C.M.running)
            st.session_state["stream_interval_ms"] = st.slider("Stream interval (ms)", 200, 3000, 1000, 100)
            st.session_state["knn_k"] = st.slider("RAG k (neighbors)", 5, 200, self.C.M.live_cfg.knn_k, 5)
            self.C.M.live_cfg.knn_k = int(st.session_state["knn_k"])
            thr_default = float(self.C.M.meta_a.get("threshold", 0.5)) if self.C.M.meta_a else 0.5
            st.session_state["switch_thr"] = st.slider("ANN-A switch threshold", 0.05, 0.95, thr_default, 0.01)

            st.divider()
            if st.button("üß† Train Models (pause stream)"):
                self.C.M.running = False
                self.C.train_models()

            st.divider()
            st.markdown("**Status**")
            st.write(f"FAISS: {'‚úÖ' if HAVE_FAISS else '‚ö†Ô∏è NumPy fallback'}")
            st.write(f"ANN-A: {'‚úÖ' if self.C.M.model_a is not None else '‚Äî'} | ANN-B: {'‚úÖ' if self.C.M.model_b is not None else '‚Äî'}")
            st.write(f"Snapshots buffered: {len(self.C.M.snapshots)}")

    def main(self):
        st.title("üì∂ SmartSwitcher ‚Äî LTE / WiFi / LMR (MVC Demo)")
        st.caption("Live synthetic telemetry ‚Üí Vector DB (FAISS) ‚Üí RAG ‚Üí ANN-A (gate) ‚Üí ANN-B (selector)")

        col1, col2 = st.columns([1.4, 1])
        with col1:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            st.subheader("Live Snapshot")

            if self.C.M.running:
                snap, cand, decision, pvec = self.C.step()
            elif st.button("‚ûï Step once"):
                snap, cand, decision, pvec = self.C.step()
            elif len(self.C.M.snapshots) > 0:
                sid_show = int(self.C.M.sid - 1)
                snap = self.C.M.snapshots[self.C.M.snapshots["snapshot_id"] == sid_show]
                cand = self.C.M.candidates[self.C.M.candidates["snapshot_id"] == sid_show]
                decision = self.C.M.log[-1]["decision"] if self.C.M.log else "‚Äî"
                pvec = None
            else:
                snap, cand, decision, pvec = None, None, "‚Äî", None

            if snap is not None:
                srow = snap.iloc[0]
                st.markdown(f"<div class='big-metric'>snapshot_id={int(srow.snapshot_id)} ¬∑ {srow.timestamp}</div>", unsafe_allow_html=True)
                st.markdown(f"<span class='badge'>current: {srow.current_network}</span>", unsafe_allow_html=True)
                st.markdown(f"<div class='small-muted'>lat={srow.lat:.5f}, lon={srow.lon:.5f} ¬∑ speed={srow.speed_mps:.1f} m/s ¬∑ app={srow.app_class}</div>", unsafe_allow_html=True)
                st.write("")
                show_cols = ["candidate_network","available","tput_dl_mbps","rtt_ms","loss_rate","switch_outage_ms","net_utility","label_switch_now"]
                st.dataframe(cand[show_cols].round(3), use_container_width=True, hide_index=True)
                st.markdown(f"**Decision:** {decision}")
                if pvec is not None:
                    names, probs = pvec
                    dfp = pd.DataFrame({"network": names, "prob": probs})
                    st.bar_chart(dfp.set_index("network"))
            st.markdown('</div>', unsafe_allow_html=True)

        with col2:
            st.markdown('<div class="card">', unsafe_allow_html=True)
            st.subheader("Recent Decisions")
            if len(self.C.M.log) > 0:
                st.table(pd.DataFrame(self.C.M.log[-12:]).iloc[::-1])
            else:
                st.write("‚Äî")
            st.markdown('</div>', unsafe_allow_html=True)
